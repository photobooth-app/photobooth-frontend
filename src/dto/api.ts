/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/actions/image/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Chose 1Pic Get */
        get: operations["api_chose_1pic_get_api_actions_image__index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/collage/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Chose Collage Get */
        get: operations["api_chose_collage_get_api_actions_collage__index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/animation/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Chose Animation Get */
        get: operations["api_chose_animation_get_api_actions_animation__index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/video/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Chose Video Get */
        get: operations["api_chose_video_get_api_actions_video__index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/multicamera/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Chose Multicamera Get */
        get: operations["api_chose_multicamera_get_api_actions_multicamera__index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Cmd Confirm Get */
        get: operations["api_cmd_confirm_get_api_actions_confirm_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Cmd Reject Get */
        get: operations["api_cmd_reject_get_api_actions_reject_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Cmd Stop Get */
        get: operations["api_cmd_stop_get_api_actions_stop_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Cmd Abort Get */
        get: operations["api_cmd_abort_get_api_actions_abort_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aquisition/stream.mjpg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Video Stream
         * @description endpoint to stream live video to clients
         */
        get: operations["video_stream_api_aquisition_stream_mjpg_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aquisition/still": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Still Get
         * @description Aquire image and serve to download
         *
         *     Raises:
         *         HTTPException: Image could not be aquired from backend
         *
         *     Returns:
         *         Response: Returns jpeg image to download
         */
        get: operations["api_still_get_api_aquisition_still_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/aquisition/mode/{mode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Cmd Aquisition Capturemode Get
         * @description set backends to preview or capture mode (usually automatically switched as needed by processingservice)
         */
        get: operations["api_cmd_aquisition_capturemode_get_api_aquisition_mode__mode__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Config Current Active */
        get: operations["api_get_config_current_active_api_config_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/debug/log/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Log Latest
         * @description provide latest logfile to download
         *     TODO Handle exception if file not exists
         *
         *     Returns:
         *         _type_: _description_
         */
        get: operations["get_log_latest_api_debug_log_latest_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mediacollection/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Getitems */
        get: operations["api_getitems_api_mediacollection__get"];
        put?: never;
        post?: never;
        /** Api Gallery Delete All */
        delete: operations["api_gallery_delete_all_api_mediacollection__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mediacollection/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Getitem */
        get: operations["api_getitem_api_mediacollection__item_id__get"];
        put?: never;
        post?: never;
        /** Api Gallery Delete */
        delete: operations["api_gallery_delete_api_mediacollection__item_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mediaprocessing/preview/{mediaitem_id}/{filter}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Preview Image Filtered */
        get: operations["api_get_preview_image_filtered_api_mediaprocessing_preview__mediaitem_id___filter__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mediaprocessing/applyfilter/{mediaitem_id}/{filter}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Applyfilter */
        get: operations["api_get_applyfilter_api_mediaprocessing_applyfilter__mediaitem_id___filter__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/share/actions/latest/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Api Share Latest */
        post: operations["api_share_latest_api_share_actions_latest__index__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/share/actions/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Api Share Latest */
        post: operations["api_share_latest_api_share_actions__index__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/share/actions/{id}/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Api Share Item Id */
        post: operations["api_share_item_id_api_share_actions__id___index__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe
         * @description Eventstream to feed clients with server generated events and data
         */
        get: operations["subscribe_api_sse_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/host/{param}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Cmd Host */
        get: operations["api_cmd_host_api_system_host__param__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/service/{param}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Cmd Service */
        get: operations["api_cmd_service_api_system_service__param__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/systemctl/{param}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Cmd Systemctl */
        get: operations["api_cmd_systemctl_api_system_systemctl__param__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login For Access Token */
        post: operations["login_for_access_token_api_admin_auth_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Users Me */
        get: operations["read_users_me_api_admin_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/config/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Configurables */
        get: operations["api_get_configurables_api_admin_config_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Api Reset All Config */
        delete: operations["api_reset_all_config_api_admin_config_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/config/{configurable}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Config Current Active */
        get: operations["api_get_config_current_active_api_admin_config__configurable__get"];
        put?: never;
        post?: never;
        /** Api Reset Config */
        delete: operations["api_reset_config_api_admin_config__configurable__delete"];
        options?: never;
        head?: never;
        /**
         * Api Post Config Current
         * @description Update the configuration for appconfig (configurable=app) or a plugin (example configurable="photobooth.plugins.gpio_lights")
         *     The configuration is persisted also after update.
         *     updated_config is a generic type valid to receive json objects instead of a pydantic model because depending on the configurable
         *     the model is different.
         *
         *     Args:
         *         configurable (str): app for appconfig, otherwise str with plugin name to update the config for. Defaults to None.
         *         updated_config (dict[AnyStr, Any]): valid json that is validated against appconfig or plugin config pydantic models
         */
        patch: operations["api_post_config_current_api_admin_config__configurable__patch"];
        trace?: never;
    };
    "/api/admin/config/{configurable}/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Config Schema */
        get: operations["api_get_config_schema_api_admin_config__configurable__schema_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/files/list/{dir}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get List */
        get: operations["get_list_api_admin_files_list__dir__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/files/file/{file}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get File */
        get: operations["get_file_api_admin_files_file__file__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/files/file/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Upload File */
        post: operations["create_upload_file_api_admin_files_file_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/files/folder/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Post Folder New
         * @description need to provide full path starting from CWD.
         */
        post: operations["post_folder_new_api_admin_files_folder_new_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/files/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Delete */
        post: operations["post_delete_api_admin_files_delete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/files/zip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Zip */
        post: operations["post_zip_api_admin_files_zip_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/files/clearrecycledir": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Clearrecycledir
         * @description Warning: deletes all files permanently without any further confirmation
         *
         *     Raises:
         *         HTTPException: _description_
         */
        get: operations["api_clearrecycledir_api_admin_files_clearrecycledir_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/information/cntr/reset/{field}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Statscounter Reset Field */
        get: operations["api_get_statscounter_reset_field_api_admin_information_cntr_reset__field__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/information/cntr/reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Statscounter Reset All */
        get: operations["api_get_statscounter_reset_all_api_admin_information_cntr_reset__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/share/cntr/reset/{field}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Limitscounter Reset Field */
        get: operations["api_get_limitscounter_reset_field_api_admin_share_cntr_reset__field__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/share/cntr/reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Limitscounter Reset All */
        get: operations["api_get_limitscounter_reset_all_api_admin_share_cntr_reset__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{dimension}/{mediaitem_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Getitems */
        get: operations["api_getitems_media__dimension___mediaitem_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Index
         * @description return homepage of booth
         */
        get: operations["index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private.css": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ui Private Css
         * @description if private.css exists return the file content, otherwise send empty response to avoid 404
         */
        get: operations["ui_private_css_private_css_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/userdata/{filepath}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Api Get Userfiles */
        get: operations["api_get_userfiles_userdata__filepath__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Postprocess animation captures
         * @description Configure stages how to process images after capture.
         */
        AnimationConfigurationSet: {
            /**
             * Name
             * @description Name to identify, only used for display in admin center.
             * @default default animation
             */
            name: string;
            jobcontrol: components["schemas"]["MultiImageJobControl"];
            processing: components["schemas"]["AnimationProcessing"];
            trigger: components["schemas"]["Trigger"];
        };
        /** AnimationMergeDefinition */
        AnimationMergeDefinition: {
            /**
             * Duration
             * @default 2000
             */
            duration: number;
            /**
             * Predefined Image
             * @default
             */
            predefined_image: string;
            /** @default original */
            filter: components["schemas"]["PilgramFilter"];
        };
        /**
         * Animation (GIF) processing after capture
         * @description Configure stages how to process collage after capture.
         */
        AnimationProcessing: {
            /**
             * Canvas Width
             * @description Width (X) in pixel of animation image (GIF). The higher the better the quality but also longer time to process. All processes keep aspect ratio.
             * @default 1500
             */
            canvas_width: number;
            /**
             * Canvas Height
             * @description Height (Y) in pixel of animation image (GIF). The higher the better the quality but also longer time to process. All processes keep aspect ratio.
             * @default 900
             */
            canvas_height: number;
            /**
             * Merge Definition
             * @description Sequence images in an animated GIF. Predefined image files are used instead a camera capture. File needs to be located in working directory/userdata/*
             * @default []
             */
            merge_definition: components["schemas"]["AnimationMergeDefinition"][];
        };
        /**
         * AppConfig
         * @description AppConfig class glueing all together
         *
         *     In the case where a value is specified for the same Settings field in multiple ways, the selected value is determined as follows
         *     (in descending order of priority):
         *
         *     1 Arguments passed to the Settings class initialiser.
         *     2 Environment variables, e.g. my_prefix_special_function as described above.
         *     3 Variables loaded from a dotenv (.env) file.
         *     4 Variables loaded from the secrets directory.
         *     5 The default field values for the Settings model.
         */
        AppConfig: {
            /** @default {
             *       "admin_password": "************",
             *       "logging_level": "DEBUG",
             *       "users_delete_to_recycle_dir": true
             *     } */
            common: components["schemas"]["GroupCommon"];
            /** @default {
             *       "image": [
             *         {
             *           "jobcontrol": {
             *             "countdown_capture": 2
             *           },
             *           "name": "default single image",
             *           "processing": {
             *             "fill_background_color": "blue",
             *             "fill_background_enable": false,
             *             "filter": "original",
             *             "img_background_enable": true,
             *             "img_background_file": "userdata/backgrounds/pink-7761356_1920.jpg",
             *             "img_frame_enable": true,
             *             "img_frame_file": "userdata/frames/frame_image_photobooth-app.png",
             *             "texts": [
             *               {
             *                 "color": "#333",
             *                 "font": "userdata/fonts/Roboto-Bold.ttf",
             *                 "font_size": 30,
             *                 "pos_x": 1300,
             *                 "pos_y": 1250,
             *                 "rotate": 0,
             *                 "text": "Visit photobooth-app.org and build yours!"
             *               }
             *             ],
             *             "texts_enable": true
             *           },
             *           "trigger": {
             *             "gpio_trigger": {
             *               "pin": "27",
             *               "trigger_on": "pressed"
             *             },
             *             "keyboard_trigger": {
             *               "keycode": "i"
             *             },
             *             "ui_trigger": {
             *               "custom_color": "#196cb0",
             *               "icon": "photo_camera",
             *               "show_button": true,
             *               "title": "Image",
             *               "use_custom_color": false
             *             }
             *           }
             *         }
             *       ],
             *       "collage": [
             *         {
             *           "jobcontrol": {
             *             "approve_autoconfirm_timeout": 15,
             *             "ask_approval_each_capture": true,
             *             "countdown_capture": 2,
             *             "countdown_capture_second_following": 1,
             *             "show_individual_captures_in_gallery": true
             *           },
             *           "name": "default collage",
             *           "processing": {
             *             "canvas_fill_background_color": "green",
             *             "canvas_fill_background_enable": false,
             *             "canvas_height": 1280,
             *             "canvas_img_background_enable": false,
             *             "canvas_img_background_file": "",
             *             "canvas_img_front_enable": true,
             *             "canvas_img_front_file": "userdata/frames/pixabay-poster-2871536_1920.png",
             *             "canvas_texts": [
             *               {
             *                 "color": "#333",
             *                 "font": "userdata/fonts/Roboto-Bold.ttf",
             *                 "font_size": 40,
             *                 "pos_x": 200,
             *                 "pos_y": 1100,
             *                 "rotate": 1,
             *                 "text": "Have a nice day :)"
             *               }
             *             ],
             *             "canvas_texts_enable": true,
             *             "canvas_width": 1920,
             *             "capture_fill_background_color": "blue",
             *             "capture_fill_background_enable": false,
             *             "capture_img_background_enable": false,
             *             "capture_img_background_file": "",
             *             "merge_definition": [
             *               {
             *                 "description": "left",
             *                 "filter": "earlybird",
             *                 "height": 725,
             *                 "pos_x": 160,
             *                 "pos_y": 220,
             *                 "predefined_image": "",
             *                 "rotate": 0,
             *                 "width": 510
             *               },
             *               {
             *                 "description": "middle predefined",
             *                 "filter": "original",
             *                 "height": 725,
             *                 "pos_x": 705,
             *                 "pos_y": 66,
             *                 "predefined_image": "userdata/predefined_images/photobooth-collage-predefined-image.png",
             *                 "rotate": 0,
             *                 "width": 510
             *               },
             *               {
             *                 "description": "right",
             *                 "filter": "reyes",
             *                 "height": 725,
             *                 "pos_x": 1245,
             *                 "pos_y": 220,
             *                 "predefined_image": "",
             *                 "rotate": 0,
             *                 "width": 510
             *               }
             *             ]
             *           },
             *           "trigger": {
             *             "gpio_trigger": {
             *               "pin": "22",
             *               "trigger_on": "pressed"
             *             },
             *             "keyboard_trigger": {
             *               "keycode": "c"
             *             },
             *             "ui_trigger": {
             *               "custom_color": "#196cb0",
             *               "icon": "auto_awesome_mosaic",
             *               "show_button": true,
             *               "title": "Collage",
             *               "use_custom_color": false
             *             }
             *           }
             *         }
             *       ],
             *       "animation": [
             *         {
             *           "jobcontrol": {
             *             "approve_autoconfirm_timeout": 15,
             *             "ask_approval_each_capture": false,
             *             "countdown_capture": 2,
             *             "countdown_capture_second_following": 0.5,
             *             "show_individual_captures_in_gallery": false
             *           },
             *           "name": "default animation",
             *           "processing": {
             *             "canvas_height": 900,
             *             "canvas_width": 1500,
             *             "merge_definition": [
             *               {
             *                 "duration": 2000,
             *                 "filter": "crema",
             *                 "predefined_image": ""
             *               },
             *               {
             *                 "duration": 2000,
             *                 "filter": "inkwell",
             *                 "predefined_image": ""
             *               },
             *               {
             *                 "duration": 2000,
             *                 "filter": "clarendon",
             *                 "predefined_image": ""
             *               },
             *               {
             *                 "duration": 2000,
             *                 "filter": "toaster",
             *                 "predefined_image": ""
             *               },
             *               {
             *                 "duration": 4000,
             *                 "filter": "original",
             *                 "predefined_image": "userdata/predefined_images/photobooth-gif-animation-predefined-image.png"
             *               }
             *             ]
             *           },
             *           "trigger": {
             *             "gpio_trigger": {
             *               "pin": "24",
             *               "trigger_on": "pressed"
             *             },
             *             "keyboard_trigger": {
             *               "keycode": "g"
             *             },
             *             "ui_trigger": {
             *               "custom_color": "#196cb0",
             *               "icon": "gif_box",
             *               "show_button": true,
             *               "title": "Animation",
             *               "use_custom_color": false
             *             }
             *           }
             *         }
             *       ],
             *       "video": [
             *         {
             *           "jobcontrol": {
             *             "countdown_capture": 2
             *           },
             *           "name": "default video",
             *           "processing": {
             *             "boomerang": true,
             *             "video_duration": 5,
             *             "video_framerate": 15
             *           },
             *           "trigger": {
             *             "gpio_trigger": {
             *               "pin": "25",
             *               "trigger_on": "pressed"
             *             },
             *             "keyboard_trigger": {
             *               "keycode": "v"
             *             },
             *             "ui_trigger": {
             *               "custom_color": "#196cb0",
             *               "icon": "movie",
             *               "show_button": true,
             *               "title": "Video",
             *               "use_custom_color": false
             *             }
             *           }
             *         }
             *       ],
             *       "multicamera": [
             *         {
             *           "jobcontrol": {
             *             "countdown_capture": 2,
             *             "show_individual_captures_in_gallery": false
             *           },
             *           "name": "default wigglegram",
             *           "processing": {
             *             "canvas_height": 900,
             *             "canvas_width": 1500,
             *             "duration": 125,
             *             "filter": "original"
             *           },
             *           "trigger": {
             *             "gpio_trigger": {
             *               "pin": "12",
             *               "trigger_on": "pressed"
             *             },
             *             "keyboard_trigger": {
             *               "keycode": "w"
             *             },
             *             "ui_trigger": {
             *               "custom_color": "#196cb0",
             *               "icon": "burst_mode",
             *               "show_button": true,
             *               "title": "Wigglegram",
             *               "use_custom_color": false
             *             }
             *           }
             *         }
             *       ]
             *     } */
            actions: components["schemas"]["GroupActions"];
            /** @default {
             *       "sharing_enabled": true,
             *       "number_direct_access_buttons": 1,
             *       "actions": [
             *         {
             *           "handles_images_only": false,
             *           "name": "default print settings",
             *           "processing": {
             *             "ask_user_for_parameter_input": false,
             *             "max_shares": 0,
             *             "parameters": [
             *               {
             *                 "default": "1",
             *                 "key": "copies",
             *                 "label": "Copies",
             *                 "ui_type": "int",
             *                 "valid_max": "3",
             *                 "valid_min": "1"
             *               }
             *             ],
             *             "parameters_dialog_action_icon": "start",
             *             "parameters_dialog_action_label": "GO",
             *             "parameters_dialog_caption": "How many copies?",
             *             "share_blocked_time": 3,
             *             "share_command": "echo {filename} {copies}"
             *           },
             *           "trigger": {
             *             "gpio_trigger": {
             *               "pin": "23",
             *               "trigger_on": "pressed"
             *             },
             *             "keyboard_trigger": {
             *               "keycode": "p"
             *             },
             *             "ui_trigger": {
             *               "custom_color": "#196cb0",
             *               "icon": "print",
             *               "show_button": true,
             *               "title": "Print",
             *               "use_custom_color": false
             *             }
             *           }
             *         },
             *         {
             *           "handles_images_only": true,
             *           "name": "default print settings",
             *           "processing": {
             *             "ask_user_for_parameter_input": true,
             *             "max_shares": 0,
             *             "parameters": [
             *               {
             *                 "default": "1",
             *                 "key": "copies",
             *                 "label": "Copies",
             *                 "ui_type": "int",
             *                 "valid_max": "3",
             *                 "valid_min": "1"
             *               },
             *               {
             *                 "default": "me@mgineer85.de",
             *                 "key": "mail",
             *                 "label": "E-Mail address",
             *                 "ui_type": "input",
             *                 "valid_max": "128",
             *                 "valid_min": "5"
             *               }
             *             ],
             *             "parameters_dialog_action_icon": "start",
             *             "parameters_dialog_action_label": "GO",
             *             "parameters_dialog_caption": "Print and mail...",
             *             "share_blocked_time": 3,
             *             "share_command": "echo {filename} {copies} {mail}"
             *           },
             *           "trigger": {
             *             "gpio_trigger": {
             *               "pin": "23",
             *               "trigger_on": "pressed"
             *             },
             *             "keyboard_trigger": {
             *               "keycode": "p"
             *             },
             *             "ui_trigger": {
             *               "custom_color": "#196cb0",
             *               "icon": "print",
             *               "show_button": true,
             *               "title": "Print",
             *               "use_custom_color": false
             *             }
             *           }
             *         }
             *       ]
             *     } */
            share: components["schemas"]["GroupShare"];
            /** @default {
             *       "enabled": false,
             *       "shareservice_url": "https://photobooth-app.org/extras/shareservice-landing/",
             *       "shareservice_apikey": "changedefault!",
             *       "share_custom_qr_url": "http://localhost:8000/media/full/{identifier}"
             *     } */
            qrshare: components["schemas"]["GroupQrShare"];
            /** @default {
             *       "enabled": false,
             *       "target_folder_name": "photobooth"
             *     } */
            filetransfer: components["schemas"]["GroupFileTransfer"];
            /** @default {
             *       "HIRES_STILL_QUALITY": 90,
             *       "full_still_length": 1500,
             *       "preview_still_length": 1200,
             *       "thumbnail_still_length": 400,
             *       "video_bitrate": 3000,
             *       "video_compatibility_mode": false,
             *       "removechromakey_enable": false,
             *       "removechromakey_keycolor": 110,
             *       "removechromakey_tolerance": 10
             *     } */
            mediaprocessing: components["schemas"]["GroupMediaprocessing"];
            /** @default {
             *       "PRIMARY_COLOR": "#196cb0",
             *       "SECONDARY_COLOR": "#b8124f",
             *       "theme": "system",
             *       "show_gallery_on_frontpage": true,
             *       "show_admin_on_frontpage": true,
             *       "admin_button_invisible": false,
             *       "show_frontpage_timeout": 5,
             *       "enable_automatic_slideshow": true,
             *       "show_automatic_slideshow_timeout": 300,
             *       "enable_livestream_when_idle": true,
             *       "enable_livestream_when_active": true,
             *       "livestream_mirror_effect": true,
             *       "livestream_blurredbackground": true,
             *       "enable_livestream_frameoverlay": true,
             *       "livestream_frameoverlay_image": "/userdata/frames/frame_image_photobooth-app.png",
             *       "FRONTPAGE_TEXT": "<div class=\"fixed-center text-h2 text-weight-bold text-center text-white\" style=\"text-shadow: 4px 4px 4px #666;\">Hey!<br>Let's take some pictures! <br>📷</div>",
             *       "TAKEPIC_MSG_TIME": 0.5,
             *       "TAKEPIC_MSG_TEXT": "😃",
             *       "AUTOCLOSE_NEW_ITEM_ARRIVED": 30,
             *       "GALLERY_EMPTY_MSG": "<div class=\"fixed-center text-h2 text-weight-bold text-center text-white\" style=\"text-shadow: 4px 4px 4px #666;\">Empty, Zero, Nada! 🤷‍♂️<br>Let's take some pictures! <br>📷💕</div>",
             *       "gallery_show_qrcode": true,
             *       "qrcode_text_above": "👋 Download your photo!",
             *       "qrcode_text_below": "Scan above code with your phone.",
             *       "gallery_show_filter": true,
             *       "gallery_filter_userselectable": [
             *         "original",
             *         "_1977",
             *         "aden",
             *         "ashby",
             *         "amaro",
             *         "brannan",
             *         "brooklyn",
             *         "charmes",
             *         "clarendon",
             *         "crema",
             *         "dogpatch",
             *         "earlybird",
             *         "gingham",
             *         "ginza",
             *         "hefe",
             *         "helena",
             *         "hudson",
             *         "inkwell",
             *         "juno",
             *         "kelvin",
             *         "lark",
             *         "lofi",
             *         "ludwig",
             *         "maven",
             *         "mayfair",
             *         "moon",
             *         "nashville",
             *         "perpetua",
             *         "poprocket",
             *         "reyes",
             *         "rise",
             *         "sierra",
             *         "skyline",
             *         "slumber",
             *         "stinson",
             *         "sutro",
             *         "toaster",
             *         "valencia",
             *         "walden",
             *         "willow",
             *         "xpro2"
             *       ],
             *       "gallery_show_download": true,
             *       "gallery_show_delete": true,
             *       "gallery_show_shareprint": true
             *     } */
            uisettings: components["schemas"]["GroupUiSettings"];
            /** @default {
             *       "enable_livestream": true,
             *       "retry_capture": 3,
             *       "countdown_camera_capture_offset": 0.2,
             *       "index_backend_stills": 0,
             *       "index_backend_video": 0,
             *       "index_backend_multicam": 0,
             *       "group_backends": [
             *         {
             *           "digicamcontrol": {
             *             "base_url": "http://127.0.0.1:5513",
             *             "orientation": "1: 0°"
             *           },
             *           "enabled": true,
             *           "selected_device": "VirtualCamera",
             *           "virtualcamera": {
             *             "emulate_hires_static_still": false,
             *             "emulate_multicam_capture_devices": 4,
             *             "framerate": 15,
             *             "orientation": "1: 0°"
             *           },
             *           "webcamcv2": {
             *             "CAM_RESOLUTION_HEIGHT": 10000,
             *             "CAM_RESOLUTION_WIDTH": 10000,
             *             "device_index": 0,
             *             "framerate": 15,
             *             "orientation": "1: 0°"
             *           },
             *           "wigglecam": {
             *             "index_cam_stills": 0,
             *             "index_cam_video": 0,
             *             "keep_node_copy": false,
             *             "nodes": [
             *               {
             *                 "base_url": "http://127.0.0.1:8010/",
             *                 "description": "TestNode"
             *               }
             *             ]
             *           }
             *         }
             *       ]
             *     } */
            backends: components["schemas"]["GroupBackends"];
            /** @default {
             *       "keyboard_input_enabled": false,
             *       "gpio_enabled": false,
             *       "gpio_pin_shutdown": 17,
             *       "gpio_pin_reboot": 18
             *     } */
            hardwareinputoutput: components["schemas"]["GroupHardwareInputOutput"];
            /** @default {
             *       "secret_key": "ThisIsTheDefaultSecret"
             *     } */
            misc: components["schemas"]["GroupMisc"];
        };
        /** Body_create_upload_file_api_admin_files_file_upload_post */
        Body_create_upload_file_api_admin_files_file_upload_post: {
            /** Upload Target Folder */
            upload_target_folder: string;
            /** Uploaded Files */
            uploaded_files: string[];
        };
        /** Body_login_for_access_token_api_admin_auth_token_post */
        Body_login_for_access_token_api_admin_auth_token_post: {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
        };
        /**
         * Postprocess collage captures
         * @description Configure stages how to process images after capture.
         */
        CollageConfigurationSet: {
            /**
             * Name
             * @description Name to identify, only used for display in admin center.
             * @default default collage
             */
            name: string;
            jobcontrol: components["schemas"]["MultiImageJobControl"];
            processing: components["schemas"]["CollageProcessing"];
            trigger: components["schemas"]["Trigger"];
        };
        /** CollageMergeDefinition */
        CollageMergeDefinition: {
            /**
             * Description
             * @default
             */
            description: string;
            /**
             * Pos X
             * @default 50
             */
            pos_x: number;
            /**
             * Pos Y
             * @default 50
             */
            pos_y: number;
            /**
             * Width
             * @default 600
             */
            width: number;
            /**
             * Height
             * @default 600
             */
            height: number;
            /**
             * Rotate
             * @default 0
             */
            rotate: number;
            /**
             * Predefined Image
             * @default
             */
            predefined_image: string;
            /** @default original */
            filter: components["schemas"]["PilgramFilter"];
        };
        /**
         * Collage processing
         * @description Configure stages how to process collage after capture.
         */
        CollageProcessing: {
            /**
             * Capture Fill Background Enable
             * @description Apply solid color background to captured image (useful only if image is extended or background removed)
             * @default false
             */
            capture_fill_background_enable: boolean;
            /**
             * Capture Fill Background Color
             * Format: color
             * @description Solid color used to fill background.
             * @default blue
             */
            capture_fill_background_color: string;
            /**
             * Capture Img Background Enable
             * @description Add image from file to background (useful only if image is extended or background removed)
             * @default false
             */
            capture_img_background_enable: boolean;
            /**
             * Capture Img Background File
             * @description Image file to use as background filling transparent area. File needs to be located in working directory/userdata/*
             * @default
             */
            capture_img_background_file: string;
            /**
             * Canvas Width
             * @description Width (X) in pixel of collage image. The higher the better the quality but also longer time to process. All processes keep aspect ratio.
             * @default 1920
             */
            canvas_width: number;
            /**
             * Canvas Height
             * @description Height (Y) in pixel of collage image. The higher the better the quality but also longer time to process. All processes keep aspect ratio.
             * @default 1280
             */
            canvas_height: number;
            /**
             * Merge Definition
             * @description How to arrange single images in the collage. Pos_x/Pos_y measure in pixel starting 0/0 at top-left in image. Width/Height in pixels. Aspect ratio is kept always. Predefined image files are used instead a camera capture. File needs to be located in working directory/userdata/*
             */
            merge_definition: components["schemas"]["CollageMergeDefinition"][];
            /**
             * Canvas Fill Background Enable
             * @description Apply solid color background to collage
             * @default false
             */
            canvas_fill_background_enable: boolean;
            /**
             * Canvas Fill Background Color
             * Format: color
             * @description Solid color used to fill background.
             * @default green
             */
            canvas_fill_background_color: string;
            /**
             * Canvas Img Background Enable
             * @description Add image from file to background.
             * @default false
             */
            canvas_img_background_enable: boolean;
            /**
             * Canvas Img Background File
             * @description Image file to use as background filling transparent area. File needs to be located in userdata/*
             * @default
             */
            canvas_img_background_file: string;
            /**
             * Canvas Img Front Enable
             * @description Overlay image on canvas image.
             * @default false
             */
            canvas_img_front_enable: boolean;
            /**
             * Canvas Img Front File
             * @description Image file to paste on top over photos and backgrounds. Photos are visible only through transparant parts. Image needs to be transparent (PNG). File needs to be located in working directory/userdata/*
             * @default
             */
            canvas_img_front_file: string;
            /**
             * Canvas Texts Enable
             * @description General enable apply texts below.
             * @default false
             */
            canvas_texts_enable: boolean;
            /**
             * Canvas Texts
             * @description Text to overlay on final collage. Pos_x/Pos_y measure in pixel starting 0/0 at top-left in image. Font to use in text stages. File needs to be located in working directory/userdata/*
             * @default []
             */
            canvas_texts: components["schemas"]["TextsConfig"][];
        };
        /** ConfigCameraNode */
        ConfigCameraNode: {
            /**
             * Description
             * @description Not used in the app, you can use it to identify the node.
             * @default
             */
            description: string;
            /**
             * Base Url
             * Format: uri
             * @description Base URL (including port) the node can be accessed by. Based on your setup, usually IP is preferred over hostname.
             * @default http://127.0.0.1:8010/
             */
            base_url: string;
        };
        /**
         * DimensionTypes
         * @description SQLalchemy persists the name, fastapi validates against the value.
         *     We just set name==value so it works in both worlds without any conversion.
         *     Ref: https://github.com/fastapi/fastapi/discussions/11098
         * @enum {string}
         */
        DimensionTypes: "full" | "preview" | "thumbnail";
        /**
         * GPIO triggers configuration
         * @description Configure trigger the user can interact with. Sources are GPIO and keyboard.
         */
        GpioTrigger: {
            /**
             * Pin
             * @description GPIO the button is connected to.
             * @default
             */
            pin: string;
            /**
             * Trigger On
             * @description Trigger action when button pressed (contact closed), released (contact open after closed) or longpress (hold for 0.6 seconds).
             * @default pressed
             * @enum {string}
             */
            trigger_on: "pressed" | "released" | "longpress";
        };
        /**
         * Actions configuration
         * @description Configure actions like capture photo, video, collage and animations.
         */
        GroupActions: {
            /**
             * Image
             * @description Capture single images.
             * @default [
             *       {
             *         "name": "default single image",
             *         "jobcontrol": {
             *           "countdown_capture": 2
             *         },
             *         "processing": {
             *           "fill_background_color": "blue",
             *           "fill_background_enable": false,
             *           "filter": "original",
             *           "img_background_enable": true,
             *           "img_background_file": "userdata/backgrounds/pink-7761356_1920.jpg",
             *           "img_frame_enable": true,
             *           "img_frame_file": "userdata/frames/frame_image_photobooth-app.png",
             *           "texts": [
             *             {
             *               "color": "#333",
             *               "font": "userdata/fonts/Roboto-Bold.ttf",
             *               "font_size": 30,
             *               "pos_x": 1300,
             *               "pos_y": 1250,
             *               "rotate": 0,
             *               "text": "Visit photobooth-app.org and build yours!"
             *             }
             *           ],
             *           "texts_enable": true
             *         },
             *         "trigger": {
             *           "gpio_trigger": {
             *             "pin": "27",
             *             "trigger_on": "pressed"
             *           },
             *           "keyboard_trigger": {
             *             "keycode": "i"
             *           },
             *           "ui_trigger": {
             *             "custom_color": "#196cb0",
             *             "icon": "photo_camera",
             *             "show_button": true,
             *             "title": "Image",
             *             "use_custom_color": false
             *           }
             *         }
             *       }
             *     ]
             */
            image: components["schemas"]["SingleImageConfigurationSet"][];
            /**
             * Collage
             * @description Capture collages consist of one or more still images.
             * @default [
             *       {
             *         "name": "default collage",
             *         "jobcontrol": {
             *           "approve_autoconfirm_timeout": 15,
             *           "ask_approval_each_capture": true,
             *           "countdown_capture": 2,
             *           "countdown_capture_second_following": 1,
             *           "show_individual_captures_in_gallery": true
             *         },
             *         "processing": {
             *           "canvas_fill_background_color": "green",
             *           "canvas_fill_background_enable": false,
             *           "canvas_height": 1280,
             *           "canvas_img_background_enable": false,
             *           "canvas_img_background_file": "",
             *           "canvas_img_front_enable": true,
             *           "canvas_img_front_file": "userdata/frames/pixabay-poster-2871536_1920.png",
             *           "canvas_texts": [
             *             {
             *               "color": "#333",
             *               "font": "userdata/fonts/Roboto-Bold.ttf",
             *               "font_size": 40,
             *               "pos_x": 200,
             *               "pos_y": 1100,
             *               "rotate": 1,
             *               "text": "Have a nice day :)"
             *             }
             *           ],
             *           "canvas_texts_enable": true,
             *           "canvas_width": 1920,
             *           "capture_fill_background_color": "blue",
             *           "capture_fill_background_enable": false,
             *           "capture_img_background_enable": false,
             *           "capture_img_background_file": "",
             *           "merge_definition": [
             *             {
             *               "description": "left",
             *               "filter": "earlybird",
             *               "height": 725,
             *               "pos_x": 160,
             *               "pos_y": 220,
             *               "predefined_image": "",
             *               "rotate": 0,
             *               "width": 510
             *             },
             *             {
             *               "description": "middle predefined",
             *               "filter": "original",
             *               "height": 725,
             *               "pos_x": 705,
             *               "pos_y": 66,
             *               "predefined_image": "userdata/predefined_images/photobooth-collage-predefined-image.png",
             *               "rotate": 0,
             *               "width": 510
             *             },
             *             {
             *               "description": "right",
             *               "filter": "reyes",
             *               "height": 725,
             *               "pos_x": 1245,
             *               "pos_y": 220,
             *               "predefined_image": "",
             *               "rotate": 0,
             *               "width": 510
             *             }
             *           ]
             *         },
             *         "trigger": {
             *           "gpio_trigger": {
             *             "pin": "22",
             *             "trigger_on": "pressed"
             *           },
             *           "keyboard_trigger": {
             *             "keycode": "c"
             *           },
             *           "ui_trigger": {
             *             "custom_color": "#196cb0",
             *             "icon": "auto_awesome_mosaic",
             *             "show_button": true,
             *             "title": "Collage",
             *             "use_custom_color": false
             *           }
             *         }
             *       }
             *     ]
             */
            collage: components["schemas"]["CollageConfigurationSet"][];
            /**
             * Animation
             * @description Capture GIF animation sequence consist of one or more still images. It's not a video but a low number of still images.
             * @default [
             *       {
             *         "name": "default animation",
             *         "jobcontrol": {
             *           "approve_autoconfirm_timeout": 15,
             *           "ask_approval_each_capture": false,
             *           "countdown_capture": 2,
             *           "countdown_capture_second_following": 0.5,
             *           "show_individual_captures_in_gallery": false
             *         },
             *         "processing": {
             *           "canvas_height": 900,
             *           "canvas_width": 1500,
             *           "merge_definition": [
             *             {
             *               "duration": 2000,
             *               "filter": "crema",
             *               "predefined_image": ""
             *             },
             *             {
             *               "duration": 2000,
             *               "filter": "inkwell",
             *               "predefined_image": ""
             *             },
             *             {
             *               "duration": 2000,
             *               "filter": "clarendon",
             *               "predefined_image": ""
             *             },
             *             {
             *               "duration": 2000,
             *               "filter": "toaster",
             *               "predefined_image": ""
             *             },
             *             {
             *               "duration": 4000,
             *               "filter": "original",
             *               "predefined_image": "userdata/predefined_images/photobooth-gif-animation-predefined-image.png"
             *             }
             *           ]
             *         },
             *         "trigger": {
             *           "gpio_trigger": {
             *             "pin": "24",
             *             "trigger_on": "pressed"
             *           },
             *           "keyboard_trigger": {
             *             "keycode": "g"
             *           },
             *           "ui_trigger": {
             *             "custom_color": "#196cb0",
             *             "icon": "gif_box",
             *             "show_button": true,
             *             "title": "Animation",
             *             "use_custom_color": false
             *           }
             *         }
             *       }
             *     ]
             */
            animation: components["schemas"]["AnimationConfigurationSet"][];
            /**
             * Video
             * @description Capture videos from live streaming backend.
             * @default [
             *       {
             *         "name": "default video",
             *         "jobcontrol": {
             *           "countdown_capture": 2
             *         },
             *         "processing": {
             *           "boomerang": true,
             *           "video_duration": 5,
             *           "video_framerate": 15
             *         },
             *         "trigger": {
             *           "gpio_trigger": {
             *             "pin": "25",
             *             "trigger_on": "pressed"
             *           },
             *           "keyboard_trigger": {
             *             "keycode": "v"
             *           },
             *           "ui_trigger": {
             *             "custom_color": "#196cb0",
             *             "icon": "movie",
             *             "show_button": true,
             *             "title": "Video",
             *             "use_custom_color": false
             *           }
             *         }
             *       }
             *     ]
             */
            video: components["schemas"]["VideoConfigurationSet"][];
            /**
             * Multicamera
             * @description Capture wigglegrams from a multicamera backend.
             * @default [
             *       {
             *         "name": "default wigglegram",
             *         "jobcontrol": {
             *           "countdown_capture": 2,
             *           "show_individual_captures_in_gallery": false
             *         },
             *         "processing": {
             *           "canvas_height": 900,
             *           "canvas_width": 1500,
             *           "duration": 125,
             *           "filter": "original"
             *         },
             *         "trigger": {
             *           "gpio_trigger": {
             *             "pin": "12",
             *             "trigger_on": "pressed"
             *           },
             *           "keyboard_trigger": {
             *             "keycode": "w"
             *           },
             *           "ui_trigger": {
             *             "custom_color": "#196cb0",
             *             "icon": "burst_mode",
             *             "show_button": true,
             *             "title": "Wigglegram",
             *             "use_custom_color": false
             *           }
             *         }
             *       }
             *     ]
             */
            multicamera: components["schemas"]["MulticameraConfigurationSet"][];
        };
        /**
         * Main Backend Configuration
         * @description Choose backends for still images/high quality images captured on main backend.
         *     If the livepreview is enabled, the video is captured from live backend (if configured)
         *     or main backend.
         */
        GroupBackend: {
            /**
             * Load and start backend
             * @description Selected device will be loaded and started.
             * @default true
             */
            enabled: boolean;
            /**
             * Configure device
             * @description Select backend and configure the device below
             * @default VirtualCamera
             * @enum {string}
             */
            selected_device: "VirtualCamera" | "WebcamCv2" | "Wigglecam" | "Digicamcontrol";
            /** @default {
             *       "orientation": "1: 0°",
             *       "framerate": 15,
             *       "emulate_hires_static_still": false,
             *       "emulate_multicam_capture_devices": 4
             *     } */
            virtualcamera: components["schemas"]["GroupBackendVirtualcamera"];
            /** @default {
             *       "orientation": "1: 0°",
             *       "device_index": 0,
             *       "CAM_RESOLUTION_WIDTH": 10000,
             *       "CAM_RESOLUTION_HEIGHT": 10000,
             *       "framerate": 15
             *     } */
            webcamcv2: components["schemas"]["GroupBackendOpenCv2"];
            /** @default {
             *       "keep_node_copy": false,
             *       "index_cam_stills": 0,
             *       "index_cam_video": 0,
             *       "nodes": [
             *         {
             *           "base_url": "http://127.0.0.1:8010/",
             *           "description": "TestNode"
             *         }
             *       ]
             *     } */
            wigglecam: components["schemas"]["GroupBackendWigglecam"];
            /** @default {
             *       "orientation": "1: 0°",
             *       "base_url": "http://127.0.0.1:5513"
             *     } */
            digicamcontrol: components["schemas"]["GroupBackendDigicamcontrol"];
        };
        /** Digicamcontrol */
        GroupBackendDigicamcontrol: {
            /**
             * Orientation
             * @description Choose the orientation of the camera. 0° is default orientation and applies no adjustment. The orientation will be set in the EXIF data so transformations are applied lossless.
             * @default 1: 0°
             * @enum {string}
             */
            orientation: "1: 0°" | "2: 0° mirrored" | "3: 180°" | "4: 180° mirrored" | "5: 90°" | "6: 90° mirrored" | "7: 270°" | "8: 270° mirrored";
            /**
             * Base Url
             * @description Base URL used to connect to the host running the digicamcontrol software. Usually photobooth-app and digicamcontrol are on the same computer and no adjustmend needed.
             * @default http://127.0.0.1:5513
             */
            base_url: string;
        };
        /** OpenCv2 */
        GroupBackendOpenCv2: {
            /**
             * Orientation
             * @description Choose the orientation of the camera. 0° is default orientation and applies no adjustment. The orientation will be set in the EXIF data so transformations are applied lossless.
             * @default 1: 0°
             * @enum {string}
             */
            orientation: "1: 0°" | "2: 0° mirrored" | "3: 180°" | "4: 180° mirrored" | "5: 90°" | "6: 90° mirrored" | "7: 270°" | "8: 270° mirrored";
            /**
             * Device Index
             * @description Device index of webcam. Usually 0 or 1, check docs how to determine.
             * @default 0
             */
            device_index: number;
            /**
             * Cam Resolution Width
             * @description Resolution width requested from camera.
             * @default 10000
             */
            CAM_RESOLUTION_WIDTH: number;
            /**
             * Cam Resolution Height
             * @description Resolution height requested from camera.
             * @default 10000
             */
            CAM_RESOLUTION_HEIGHT: number;
            /**
             * Framerate
             * @description Reduce the framerate to save cpu/gpu on device displaying the live preview
             * @default 15
             */
            framerate: number;
        };
        /** VirtualCamera */
        GroupBackendVirtualcamera: {
            /**
             * Orientation
             * @description Choose the orientation of the camera. 0° is default orientation and applies no adjustment. The orientation will be set in the EXIF data so transformations are applied lossless.
             * @default 1: 0°
             * @enum {string}
             */
            orientation: "1: 0°" | "2: 0° mirrored" | "3: 180°" | "4: 180° mirrored" | "5: 90°" | "6: 90° mirrored" | "7: 270°" | "8: 270° mirrored";
            /**
             * Framerate
             * @description Reduce the framerate to save cpu/gpu on device displaying the live preview
             * @default 15
             */
            framerate: number;
            /**
             * Emulate Hires Static Still
             * @description Deliver high-resolution still image instead the demovideo. Useful to test the processing times by emulating hires cameras.
             * @default false
             */
            emulate_hires_static_still: boolean;
            /**
             * Emulate Multicam Capture Devices
             * @description Number of emulated cameras when asking for synchronized capture for wigglegrams.
             * @default 4
             */
            emulate_multicam_capture_devices: number;
        };
        /** Wigglecam Connector */
        GroupBackendWigglecam: {
            /**
             * Keep Node Copy
             * @default false
             */
            keep_node_copy: boolean;
            /**
             * Index Cam Stills
             * @description Index of one node below to capture stills.
             * @default 0
             */
            index_cam_stills: number;
            /**
             * Index Cam Video
             * @description Index of one backend below to capture live preview and video.
             * @default 0
             */
            index_cam_video: number;
            /**
             * Nodes
             * @default [
             *       {
             *         "description": "TestNode",
             *         "base_url": "http://127.0.0.1:8010/"
             *       }
             *     ]
             */
            nodes: components["schemas"]["ConfigCameraNode"][];
        };
        /**
         * Camera Backend Config
         * @description Choose backends for still images/high quality images captured on main backend.
         *     If the livepreview is enabled, the video is captured from live backend (if configured)
         *     or main backend.
         */
        GroupBackends: {
            /**
             * Enable Livestream
             * @description Enable livestream (if possible)
             * @default true
             */
            enable_livestream: boolean;
            /**
             * Retry Capture
             * @description Number of attempts to gather a picture from backend.
             * @default 3
             */
            retry_capture: number;
            /**
             * Countdown Camera Capture Offset
             * @description Trigger camera capture by offset earlier (in seconds). 0 trigger exactly when countdown is 0. Use to compensate for delay in camera processing for better UX.
             * @default 0.2
             */
            countdown_camera_capture_offset: number;
            /**
             * Index Backend Stills
             * @description Index of one backend below to capture stills.
             * @default 0
             */
            index_backend_stills: number;
            /**
             * Index Backend Video
             * @description Index of one backend below to capture live preview and video.
             * @default 0
             */
            index_backend_video: number;
            /**
             * Index Backend Multicam
             * @description Index of one backend below used for multicamera images (wigglegrams).
             * @default 0
             */
            index_backend_multicam: number;
            /**
             * Group Backends
             * @default [
             *       {
             *         "enabled": true,
             *         "selected_device": "VirtualCamera",
             *         "virtualcamera": {
             *           "emulate_hires_static_still": false,
             *           "emulate_multicam_capture_devices": 4,
             *           "framerate": 15,
             *           "orientation": "1: 0°"
             *         },
             *         "webcamcv2": {
             *           "CAM_RESOLUTION_HEIGHT": 10000,
             *           "CAM_RESOLUTION_WIDTH": 10000,
             *           "device_index": 0,
             *           "framerate": 15,
             *           "orientation": "1: 0°"
             *         },
             *         "wigglecam": {
             *           "index_cam_stills": 0,
             *           "index_cam_video": 0,
             *           "keep_node_copy": false,
             *           "nodes": [
             *             {
             *               "base_url": "http://127.0.0.1:8010/",
             *               "description": "TestNode"
             *             }
             *           ]
             *         },
             *         "digicamcontrol": {
             *           "base_url": "http://127.0.0.1:5513",
             *           "orientation": "1: 0°"
             *         }
             *       }
             *     ]
             */
            group_backends: components["schemas"]["GroupBackend"][];
        };
        /**
         * Common Config
         * @description Common config for photobooth.
         */
        GroupCommon: {
            /**
             * Admin Password
             * Format: password
             * @description Password to access the admin dashboard.
             * @default **********
             */
            admin_password: string;
            /**
             * Logging Level
             * @description Log verbosity. File is writte to disc, and latest log is displayed also in UI.
             * @default DEBUG
             * @enum {string}
             */
            logging_level: "DEBUG" | "INFO" | "WARNING" | "ERROR";
            /**
             * Users Delete To Recycle Dir
             * @description If enabled, the captured files are moved to the recycle directory instead permanently deleted. Accidentally deleted images can be restored by the admin manually. Please inform users about the fact that no capture is deleted, if you enable the function!
             * @default true
             */
            users_delete_to_recycle_dir: boolean;
        };
        /**
         * USB File Transfer Service Config
         * @description Configuration for USB File Transfer Service.
         */
        GroupFileTransfer: {
            /**
             * Enabled
             * @description Enable the automatic file transfer to USB service. Files are copied when the USB drive is inserted.
             * @default false
             */
            enabled: boolean;
            /**
             * Target Folder Name
             * @description Name of the top-level folder on the USB drive where files will be copied to.
             * @default photobooth
             */
            target_folder_name: string;
        };
        /**
         * Hardware Input/Output Config
         * @description Configure hardware GPIO, keyboard and more. Find integration information in the documentation.
         */
        GroupHardwareInputOutput: {
            /**
             * Keyboard Input Enabled
             * @description Enable keyboard input globally. Keyup is catched in browsers connected to the app.
             * @default false
             */
            keyboard_input_enabled: boolean;
            /**
             * Gpio Enabled
             * @description Enable Raspberry Pi GPIOzero integration.
             * @default false
             */
            gpio_enabled: boolean;
            /**
             * Gpio Pin Shutdown
             * @description GPIO pin to shutdown after holding it for 2 seconds.
             * @default 17
             */
            gpio_pin_shutdown: number;
            /**
             * Gpio Pin Reboot
             * @description GPIO pin to reboot after holding it for 2 seconds.
             * @default 18
             */
            gpio_pin_reboot: number;
        };
        /**
         * Process media after capture
         * @description Configure stages how to process images after capture.
         */
        GroupMediaprocessing: {
            /**
             * Hires Still Quality
             * @description Still JPEG full resolution quality, applied to download images and images with filter
             * @default 90
             */
            HIRES_STILL_QUALITY: number;
            /**
             * Full Still Length
             * @description Dimension of longer side used for scaling full images. Shorter side of the image is calculated to keep aspect ratio. For performance choose as low as possible but still gives decent print quality. Example: 1500/6inch=250dpi
             * @default 1500
             */
            full_still_length: number;
            /**
             * Preview Still Length
             * @description Dimension of longer side used for scaling previews. Shorter side of the image is calculated to keep aspect ratio.
             * @default 1200
             */
            preview_still_length: number;
            /**
             * Thumbnail Still Length
             * @description Dimension of longer side used for scaling thumbnails. Shorter side of the image is calculated to keep aspect ratio.
             * @default 400
             */
            thumbnail_still_length: number;
            /**
             * Video Bitrate
             * @description Video quality bitrate in k.
             * @default 3000
             */
            video_bitrate: number;
            /**
             * Video Compatibility Mode
             * @description Enable for improved video compatibility on iOS devices. Might reduce resulting quality slightly.
             * @default false
             */
            video_compatibility_mode: boolean;
            /**
             * Removechromakey Enable
             * @description Apply chromakey greenscreen removal from captured images
             * @default false
             */
            removechromakey_enable: boolean;
            /**
             * Removechromakey Keycolor
             * @description Color (H) in HSV colorspace to remove on 360° scale.
             * @default 110
             */
            removechromakey_keycolor: number;
            /**
             * Removechromakey Tolerance
             * @description Tolerance for color (H) on chromakey color removal.
             * @default 10
             */
            removechromakey_tolerance: number;
            /**
             * Filtertype
             */
            filtertype: "none" | "pilgram2" | "stablediffusion";
        };
        /**
         * Miscellaneous Config
         * @description Quite advanced or experimental, usually not necessary to touch. Can change any time.
         */
        GroupMisc: {
            /**
             * Secret Key
             * @description Secret to encrypt authentication data. If changed, login authorization is invalidated.
             * @default ThisIsTheDefaultSecret
             */
            secret_key: string;
        };
        /**
         * QR code share
         * @description Settings about shareing media
         */
        GroupQrShare: {
            /**
             * Enabled
             * @description Enable qr share service. To enable URL needs to be configured and dl.php script setup properly.
             * @default false
             */
            enabled: boolean;
            /**
             * Shareservice Url
             * @description URL of php script that is used to serve files and share via QR code. The default is a landingpage with further instructions how to setup.
             * @default https://photobooth-app.org/extras/shareservice-landing/
             */
            shareservice_url: string;
            /**
             * Shareservice Apikey
             * @description Key to secure the download php script. Set the key in dl.php script to same value. Only if correct key is provided the shareservice works properly.
             * @default changedefault!
             */
            shareservice_apikey: string;
            /**
             * Share Custom Qr Url
             * @description URL displayed as QR code to image for download. Need you to sync the files on your own or allow the user to access via hotspot. {identifier} is replaced by the actual item's id, {filename} is replaced by the actual filename on the photobooth-data, in QR code.
             * @default http://localhost:8000/media/full/{identifier}
             */
            share_custom_qr_url: string;
        };
        /**
         * Define Share and Print Actions
         * @description Configure share or print actions.
         */
        GroupShare: {
            /**
             * Sharing Enabled
             * @description Enable sharing service in general.
             * @default true
             */
            sharing_enabled: boolean;
            /**
             * Number Direct Access Buttons
             * @description Number of buttons directly accessible in the gallery. Remaining items are available in the more-menu.
             * @default 1
             */
            number_direct_access_buttons: number;
            /**
             * Actions
             * @description Share or print mediaitems.
             * @default [
             *       {
             *         "name": "default print settings",
             *         "handles_images_only": false,
             *         "processing": {
             *           "ask_user_for_parameter_input": false,
             *           "max_shares": 0,
             *           "parameters": [
             *             {
             *               "default": "1",
             *               "key": "copies",
             *               "label": "Copies",
             *               "ui_type": "int",
             *               "valid_max": "3",
             *               "valid_min": "1"
             *             }
             *           ],
             *           "parameters_dialog_action_icon": "start",
             *           "parameters_dialog_action_label": "GO",
             *           "parameters_dialog_caption": "How many copies?",
             *           "share_blocked_time": 3,
             *           "share_command": "echo {filename} {copies}"
             *         },
             *         "trigger": {
             *           "gpio_trigger": {
             *             "pin": "23",
             *             "trigger_on": "pressed"
             *           },
             *           "keyboard_trigger": {
             *             "keycode": "p"
             *           },
             *           "ui_trigger": {
             *             "custom_color": "#196cb0",
             *             "icon": "print",
             *             "show_button": true,
             *             "title": "Print",
             *             "use_custom_color": false
             *           }
             *         }
             *       },
             *       {
             *         "name": "default print settings",
             *         "handles_images_only": true,
             *         "processing": {
             *           "ask_user_for_parameter_input": true,
             *           "max_shares": 0,
             *           "parameters": [
             *             {
             *               "default": "1",
             *               "key": "copies",
             *               "label": "Copies",
             *               "ui_type": "int",
             *               "valid_max": "3",
             *               "valid_min": "1"
             *             },
             *             {
             *               "default": "me@mgineer85.de",
             *               "key": "mail",
             *               "label": "E-Mail address",
             *               "ui_type": "input",
             *               "valid_max": "128",
             *               "valid_min": "5"
             *             }
             *           ],
             *           "parameters_dialog_action_icon": "start",
             *           "parameters_dialog_action_label": "GO",
             *           "parameters_dialog_caption": "Print and mail...",
             *           "share_blocked_time": 3,
             *           "share_command": "echo {filename} {copies} {mail}"
             *         },
             *         "trigger": {
             *           "gpio_trigger": {
             *             "pin": "23",
             *             "trigger_on": "pressed"
             *           },
             *           "keyboard_trigger": {
             *             "keycode": "p"
             *           },
             *           "ui_trigger": {
             *             "custom_color": "#196cb0",
             *             "icon": "print",
             *             "show_button": true,
             *             "title": "Print",
             *             "use_custom_color": false
             *           }
             *         }
             *       }
             *     ]
             */
            actions: components["schemas"]["ShareConfigurationSet"][];
        };
        /**
         * Personalize the User Interface
         * @description Personalize the booth's UI.
         */
        GroupUiSettings: {
            /**
             * Primary Color
             * Format: color
             * @description Primary color (e.g. buttons, title bar).
             * @default #196cb0
             */
            PRIMARY_COLOR: string;
            /**
             * Secondary Color
             * Format: color
             * @description Secondary color (admin interface, accents).
             * @default #b8124f
             */
            SECONDARY_COLOR: string;
            /**
             * Theme
             * @description Specify the theme for the app. Set to system for automatic switching based on system/browser settings or force the light/dark theme.
             * @default system
             * @enum {string}
             */
            theme: "system" | "light" | "dark";
            /**
             * Show Gallery On Frontpage
             * @description Show button to gallery on frontpage.
             * @default true
             */
            show_gallery_on_frontpage: boolean;
            /**
             * Show Admin On Frontpage
             * @description Show button to admin center, usually only during setup.
             * @default true
             */
            show_admin_on_frontpage: boolean;
            /**
             * Admin Button Invisible
             * @description If button is shown, it can still be rendered invisible. If enabled, the button is 100% transparent and 5 clicks each within 500ms are required to access the admin login.
             * @default false
             */
            admin_button_invisible: boolean;
            /**
             * Show Frontpage Timeout
             * @description Idle timeout in minutes after which the app switches to the frontpage again.
             * @default 5
             */
            show_frontpage_timeout: number;
            /**
             * Enable Automatic Slideshow
             * @description Enable a random slideshow after some time without any user interaction.
             * @default true
             */
            enable_automatic_slideshow: boolean;
            /**
             * Show Automatic Slideshow Timeout
             * @description Timeout in seconds after which the slideshow starts.
             * @default 300
             */
            show_automatic_slideshow_timeout: number;
            /**
             * Enable Livestream When Idle
             * @description When idle, the cameras livestream is displayed permanently.
             * @default true
             */
            enable_livestream_when_idle: boolean;
            /**
             * Enable Livestream When Active
             * @description When countdown or capture is active, the cameras livestream is displayed.
             * @default true
             */
            enable_livestream_when_active: boolean;
            /**
             * Livestream Mirror Effect
             * @description Flip livestream horizontally to create a mirror effect feeling more natural to users.
             * @default true
             */
            livestream_mirror_effect: boolean;
            /**
             * Livestream Blurredbackground
             * @description Display the livestream blurred in the background of the actual livestream covering the full screen. This might look nice if the livestream resolution does not match the screen's aspect ratio. Check cpu usage on low power devices.
             * @default true
             */
            livestream_blurredbackground: boolean;
            /**
             * Enable Livestream Frameoverlay
             * @description Enable to overlay livestream_frameoverlay_image the livestream.
             * @default true
             */
            enable_livestream_frameoverlay: boolean;
            /**
             * Livestream Frameoverlay Image
             * @description When enabled, the frame is overlayed the livestream. This image is not used in the postprocessing. If mirroreffect is on, it will also be mirrored. Text in the frame appears in the wrong direction but the final image is correct.
             * @default /userdata/frames/frame_image_photobooth-app.png
             */
            livestream_frameoverlay_image: string;
            /**
             * Frontpage Text
             * @description Text/HTML displayed on frontpage.
             * @default <div class="fixed-center text-h2 text-weight-bold text-center text-white" style="text-shadow: 4px 4px 4px #666;">Hey!<br>Let's take some pictures! <br>📷</div>
             */
            FRONTPAGE_TEXT: string;
            /**
             * Takepic Msg Time
             * @description Offset in seconds, the smile-icon shall be shown.
             * @default 0.5
             */
            TAKEPIC_MSG_TIME: number;
            /**
             * Takepic Msg Text
             * @description Message to display at the end of the capture countdown.
             * @default 😃
             */
            TAKEPIC_MSG_TEXT: string;
            /**
             * Autoclose New Item Arrived
             * @description Timeout in seconds a new item popup closes automatically.
             * @default 30
             */
            AUTOCLOSE_NEW_ITEM_ARRIVED: number;
            /**
             * Gallery Empty Msg
             * @description Message displayed if gallery is empty.
             * @default <div class="fixed-center text-h2 text-weight-bold text-center text-white" style="text-shadow: 4px 4px 4px #666;">Empty, Zero, Nada! 🤷‍♂️<br>Let's take some pictures! <br>📷💕</div>
             */
            GALLERY_EMPTY_MSG: string;
            /**
             * Gallery Show Qrcode
             * @description Show QR code in gallery. If shareservice is enabled the URL is automatically generated, if not go to share config and provide URL.
             * @default true
             */
            gallery_show_qrcode: boolean;
            /**
             * Qrcode Text Above
             * @description Display text above the QR code.
             * @default 👋 Download your photo!
             */
            qrcode_text_above: string;
            /**
             * Qrcode Text Below
             * @description Display text below the QR code.
             * @default Scan above code with your phone.
             */
            qrcode_text_below: string;
            /**
             * Gallery Show Filter
             * @description Show instagramlike filter (pilgram2).
             * @default true
             */
            gallery_show_filter: boolean;
            /**
             * Gallery Filter Userselectable
             * @default [
             *       "original",
             *       "_1977",
             *       "aden",
             *       "ashby",
             *       "amaro",
             *       "brannan",
             *       "brooklyn",
             *       "charmes",
             *       "clarendon",
             *       "crema",
             *       "dogpatch",
             *       "earlybird",
             *       "gingham",
             *       "ginza",
             *       "hefe",
             *       "helena",
             *       "hudson",
             *       "inkwell",
             *       "juno",
             *       "kelvin",
             *       "lark",
             *       "lofi",
             *       "ludwig",
             *       "maven",
             *       "mayfair",
             *       "moon",
             *       "nashville",
             *       "perpetua",
             *       "poprocket",
             *       "reyes",
             *       "rise",
             *       "sierra",
             *       "skyline",
             *       "slumber",
             *       "stinson",
             *       "sutro",
             *       "toaster",
             *       "valencia",
             *       "walden",
             *       "willow",
             *       "xpro2"
             *     ]
             */
            gallery_filter_userselectable: components["schemas"]["PilgramFilter"][];
            /**
             * 
             */
            gallery_filter_stablediffusion_userselectable: components["schemas"]["StableDiffusionFilter"][];
            /**
             * Gallery Show Download
             * @description Show a download button in gallery.
             * @default true
             */
            gallery_show_download: boolean;
            /**
             * Gallery Show Delete
             * @description Show a delete button in gallery.
             * @default true
             */
            gallery_show_delete: boolean;
            /**
             * Gallery Show Shareprint
             * @description Show the share/print buttons in gallery.
             * @default true
             */
            gallery_show_shareprint: boolean;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Keyboard triggers configuration
         * @description Configure trigger the user can interact with. Sources are GPIO and keyboard.
         */
        KeyboardTrigger: {
            /**
             * Keycode
             * @description Define keyboard keys to trigger actions.
             * @default
             */
            keycode: string;
        };
        /** MediaitemPublic */
        MediaitemPublic: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            media_type: components["schemas"]["MediaitemTypes"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Unprocessed
             * Format: path
             */
            unprocessed: string;
            /**
             * Processed
             * Format: path
             */
            processed: string;
            /** Show In Gallery */
            show_in_gallery: boolean;
        };
        /**
         * MediaitemTypes
         * @description SQLalchemy persists the name, fastapi validates against the value.
         *     We just set name==value so it works in both worlds without any conversion.
         *     Ref: https://github.com/fastapi/fastapi/discussions/11098
         * @enum {string}
         */
        MediaitemTypes: "image" | "collage" | "animation" | "video" | "multicamera";
        /**
         * Job control for multiple captures
         * @description Configure job control affecting the procedure.
         */
        MultiImageJobControl: {
            /**
             * Countdown Capture
             * @description Countdown in seconds, when user starts a capture process
             * @default 2
             */
            countdown_capture: number;
            /**
             * Countdown Capture Second Following
             * @description Countdown in seconds, used for second and following captures for collages
             * @default 1
             */
            countdown_capture_second_following: number;
            /**
             * Ask Approval Each Capture
             * @description Stop after every capture to ask user if he would like to continue or redo the capture. If disabled captures are granted as approved always.
             * @default false
             */
            ask_approval_each_capture: boolean;
            /**
             * Approve Autoconfirm Timeout
             * @description If user is required to approve collage captures, after this timeout, the job continues and user confirmation is assumed.
             * @default 15
             */
            approve_autoconfirm_timeout: number;
            /**
             * Show Individual Captures In Gallery
             * @description Show individual captures in the gallery. Hidden captures are still stored in the data folder. (Note: changing this setting will not change visibility of already captured images).
             * @default false
             */
            show_individual_captures_in_gallery: boolean;
        };
        /**
         * Postprocess multicamera captures
         * @description Configure stages how to process images after capture.
         */
        MulticameraConfigurationSet: {
            /**
             * Name
             * @description Name to identify, only used for display in admin center.
             * @default default wigglegram
             */
            name: string;
            jobcontrol: components["schemas"]["MulticameraJobControl"];
            processing: components["schemas"]["MulticameraProcessing"];
            trigger: components["schemas"]["Trigger"];
        };
        /**
         * Job control for wigglegram-multicamera captures
         * @description Configure job control affecting the procedure.
         */
        MulticameraJobControl: {
            /**
             * Countdown Capture
             * @description Countdown in seconds, when user starts a capture process.
             * @default 2
             */
            countdown_capture: number;
            /**
             * Show Individual Captures In Gallery
             * @description Show individual captures in the gallery. Hidden captures are still stored in the data folder. (Note: changing this setting will not change visibility of already captured images).
             * @default false
             */
            show_individual_captures_in_gallery: boolean;
        };
        /**
         * Wigglegram-multicamera processing
         * @description Configure stages how to process collage after capture.
         */
        MulticameraProcessing: {
            /**
             * Canvas Width
             * @description Width (X) in pixel of animation image (GIF). The higher the better the quality but also longer time to process. All processes keep aspect ratio.
             * @default 1500
             */
            canvas_width: number;
            /**
             * Canvas Height
             * @description Height (Y) in pixel of animation image (GIF). The higher the better the quality but also longer time to process. All processes keep aspect ratio.
             * @default 900
             */
            canvas_height: number;
            /**
             * Duration
             * @description Duration of each frame in milliseconds. Wigglegrams look good usually between 100-200ms duration.
             * @default 125
             */
            duration: number;
            /** @default original */
            filter: components["schemas"]["PilgramFilter"];
        };
        /** PathListItem */
        PathListItem: {
            /** Name */
            name: string;
            /** Filepath */
            filepath: string;
            /** Is Dir */
            is_dir: boolean;
            /** Size */
            size: number;
        };
        /**
         * PilgramFilter
         * @description Choose a Pilgram2 filter manipulating the images colors. Original means no filter to apply.
         * @enum {string}
         */
        PilgramFilter: "original" | "_1977" | "aden" | "ashby" | "amaro" | "brannan" | "brooklyn" | "charmes" | "clarendon" | "crema" | "dogpatch" | "earlybird" | "gingham" | "ginza" | "hefe" | "helena" | "hudson" | "inkwell" | "juno" | "kelvin" | "lark" | "lofi" | "ludwig" | "maven" | "mayfair" | "moon" | "nashville" | "perpetua" | "poprocket" | "reyes" | "rise" | "sierra" | "skyline" | "slumber" | "stinson" | "sutro" | "toaster" | "valencia" | "walden" | "willow" | "xpro2";
        /**
         * StableDiffusionFilter
         * @description These are examples for style prompts that apply img2img conversion using stable diffusion
         * @enum {string}
         */
        StableDiffusionFilter: "original" | "anime" | "astronaut" |  "caricature"  | "clay" | "comic" | "gotcha" | "impasto" | "kids" | "marble" | "medieval" | "neotokyo" | "pencil" | "retro" | "scifi" | "vaporwave" | "watercolor";
        /**
         * Process mediaitem before printing on paper
         * @description Configure stages how to process mediaitem before printing on paper.
         */
        ShareConfigurationSet: {
            /**
             * Name
             * @description Name to identify, only used for display in admin center.
             * @default default print settings
             */
            name: string;
            /**
             * Handles Images Only
             * @description Enable if this share type can handle only still images.
             * @default true
             */
            handles_images_only: boolean;
            processing: components["schemas"]["ShareProcessing"];
            trigger: components["schemas"]["Trigger"];
        };
        /**
         * Share/Print Actions
         * @description Configure options to share or print images.
         */
        ShareProcessing: {
            /**
             * Share Command
             * @description Command issued to share/print. Use {filename} as placeholder for the mediaitem to be shared/printed.
             * @default echo {filename}
             */
            share_command: string;
            /**
             * Ask User For Parameter Input
             * @description If enabled, when the share button is activated, a dialog pops up to input below configured parameters.
             * @default false
             */
            ask_user_for_parameter_input: boolean;
            /**
             * Parameters Dialog Caption
             * @description Caption of the dialog popup displaying the parameters.
             * @default Make your choice!
             */
            parameters_dialog_caption: string;
            /**
             * Parameters Dialog Action Icon
             * @description Icon used for the action button (any icon from material icons, see documentation).
             * @default start
             */
            parameters_dialog_action_icon: string;
            /**
             * Parameters Dialog Action Label
             * @description Text used for the action button as label.
             * @default GO
             */
            parameters_dialog_action_label: string;
            /**
             * Parameters
             * @description Define input fields the user needs to enter on share.
             * @default []
             */
            parameters: components["schemas"]["ShareProcessingParameters"][];
            /**
             * Share Blocked Time
             * @description Block queue print until time is passed. Time in seconds.
             */
            share_blocked_time: number;
            /**
             * Max Shares
             * @description Limit max shares (0 = no limit).
             * @default 0
             */
            max_shares: number;
        };
        /**
         * Additional parameters
         * @description Configure additional parameter for the share command to input by the user.
         */
        ShareProcessingParameters: {
            /**
             * Key
             * @description Define the parameter key that is replaced in the command. Example: Set to 'copies' to replace {copies} in the command by the value.
             * @default copies
             */
            key: string;
            /**
             * Label
             * @description Label the field, displayed to the user.
             * @default Copies
             */
            label: string;
            /**
             * Ui Type
             * @description Display type of the parameter in the UI. 'int' displays ➕➖ buttons in the UI. 'input' displays an input box. This affects only the UI, all parameter are interpreted as strings.
             * @default int
             * @enum {string}
             */
            ui_type: "input" | "int";
            /**
             * Default
             * @description Default value if the user does not change it.
             * @default 1
             */
            default: string;
            /**
             * Valid Min
             * @default 1
             */
            valid_min: string;
            /**
             * Valid Max
             * @default 3
             */
            valid_max: string;
        };
        /**
         * Postprocess single captures
         * @description Configure stages how to process images after capture.
         */
        SingleImageConfigurationSet: {
            /**
             * Name
             * @description Name to identify, only used for display in admin center.
             * @default default single image
             */
            name: string;
            jobcontrol: components["schemas"]["SingleImageJobControl"];
            processing: components["schemas"]["SingleImageProcessing"];
            trigger: components["schemas"]["Trigger"];
        };
        /**
         * Job control for single captures
         * @description Configure job control affecting the procedure.
         */
        SingleImageJobControl: {
            /**
             * Countdown Capture
             * @description Countdown in seconds, when user starts a capture process.
             * @default 2
             */
            countdown_capture: number;
        };
        /**
         * Single captures processing after capture
         * @description Configure stages how to process images after capture.
         */
        SingleImageProcessing: {
            /** @default original */
            filter: components["schemas"]["PilgramFilter"];
            /** @default original */
            sdfilter: components["schemas"]["StableDiffusionFilter"];
            /**
             * Fill Background Enable
             * @description Apply solid color background to captured image (useful only if image is extended or background removed)
             * @default false
             */
            fill_background_enable: boolean;
            /**
             * Fill Background Color
             * Format: color
             * @description Solid color used to fill background.
             * @default blue
             */
            fill_background_color: string;
            /**
             * Img Background Enable
             * @description Add image from file to background (useful only if image is extended or background removed)
             * @default false
             */
            img_background_enable: boolean;
            /**
             * Img Background File
             * @description Image file to use as background filling transparent area. File needs to be located in working directory/userdata/*
             * @default
             */
            img_background_file: string;
            /**
             * Img Frame Enable
             * @description Mount captured image to frame.
             * @default false
             */
            img_frame_enable: boolean;
            /**
             * Img Frame File
             * @description Image file to which the captured image is mounted to. Frame determines the output image size! Photos are visible through transparant parts. Image needs to be transparent (PNG). File needs to be located in userdata/*
             * @default
             */
            img_frame_file: string;
            /**
             * Texts Enable
             * @description General enable apply texts below.
             * @default false
             */
            texts_enable: boolean;
            /**
             * Texts
             * @description Text to overlay on images after capture. Pos_x/Pos_y measure in pixel starting 0/0 at top-left in image. Font to use in text stages. File needs to be located in working directory/userdata/*
             * @default []
             */
            texts: components["schemas"]["TextsConfig"][];
        };
        /** TextsConfig */
        TextsConfig: {
            /**
             * Text
             * @default
             */
            text: string;
            /**
             * Pos X
             * @default 50
             */
            pos_x: number;
            /**
             * Pos Y
             * @default 50
             */
            pos_y: number;
            /**
             * Rotate
             * @default 0
             */
            rotate: number;
            /**
             * Font Size
             * @default 40
             */
            font_size: number;
            /**
             * Font
             * @default userdata/fonts/Roboto-Bold.ttf
             */
            font: string;
            /**
             * Color
             * Format: color
             * @default red
             */
            color: string;
        };
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /**
         * Trigger configuration
         * @description Configure trigger the user can interact with. Sources are GPIO and keyboard.
         */
        Trigger: {
            /** @default {
             *       "show_button": true,
             *       "title": "",
             *       "icon": "",
             *       "use_custom_color": false,
             *       "custom_color": "#196cb0"
             *     } */
            ui_trigger: components["schemas"]["UiTrigger"];
            /** @default {
             *       "keycode": ""
             *     } */
            keyboard_trigger: components["schemas"]["KeyboardTrigger"];
            /** @default {
             *       "pin": "",
             *       "trigger_on": "pressed"
             *     } */
            gpio_trigger: components["schemas"]["GpioTrigger"];
        };
        /**
         * UI button configuration
         * @description UI trigger configuration.
         */
        UiTrigger: {
            /**
             * Show Button
             * @description Show the button to trigger the process.
             * @default true
             */
            show_button: boolean;
            /**
             * Title
             * @description Label used for the button.
             * @default
             */
            title: string;
            /**
             * Icon
             * @description Icon used for the button (any icon from material icons, see documentation).
             * @default
             */
            icon: string;
            /**
             * Use Custom Color
             * @description Use custom color for button.
             * @default false
             */
            use_custom_color: boolean;
            /**
             * Custom Color
             * Format: color
             * @description Custom color for the button.
             * @default #196cb0
             */
            custom_color: string;
        };
        /** User */
        User: {
            /** Username */
            username: string;
            /** Full Name */
            full_name?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * Postprocess video captures
         * @description Configure stages how to process images after capture.
         */
        VideoConfigurationSet: {
            /**
             * Name
             * @description Name to identify, only used for display in admin center.
             * @default default video
             */
            name: string;
            jobcontrol: components["schemas"]["VideoJobControl"];
            processing: components["schemas"]["VideoProcessing"];
            trigger: components["schemas"]["Trigger"];
        };
        /**
         * Job control for video captures
         * @description Configure job control affecting the procedure.
         */
        VideoJobControl: {
            /**
             * Countdown Capture
             * @description Countdown in seconds, when user starts a capture process.
             * @default 2
             */
            countdown_capture: number;
        };
        /**
         * Video Processing
         * @description Configure stages how to process collage after capture.
         */
        VideoProcessing: {
            /**
             * Video Duration
             * @description Maximum duration of the video. Users can stop earlier or capture is automatically stopped after set time.
             * @default 5
             */
            video_duration: number;
            /**
             * Boomerang
             * @description Create boomerang videos, the video is replayed reverse automatically.
             * @default false
             */
            boomerang: boolean;
            /**
             * Video Framerate
             * @description Video framerate (frames per second).
             * @default 25
             */
            video_framerate: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_chose_1pic_get_api_actions_image__index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_chose_collage_get_api_actions_collage__index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_chose_animation_get_api_actions_animation__index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_chose_video_get_api_actions_video__index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_chose_multicamera_get_api_actions_multicamera__index__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_cmd_confirm_get_api_actions_confirm_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_cmd_reject_get_api_actions_reject_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_cmd_stop_get_api_actions_stop_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_cmd_abort_get_api_actions_abort_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    video_stream_api_aquisition_stream_mjpg_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_still_get_api_aquisition_still_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_cmd_aquisition_capturemode_get_api_aquisition_mode__mode__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_get_config_current_active_api_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppConfig"];
                };
            };
        };
    };
    get_log_latest_api_debug_log_latest_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_getitems_api_mediacollection__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaitemPublic"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_gallery_delete_all_api_mediacollection__delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_getitem_api_mediacollection__item_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaitemPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_gallery_delete_api_mediacollection__item_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_get_preview_image_filtered_api_mediaprocessing_preview__mediaitem_id___filter__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mediaitem_id: string;
                filter: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_get_applyfilter_api_mediaprocessing_applyfilter__mediaitem_id___filter__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mediaitem_id: string;
                filter: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_share_latest_api_share_actions_latest__index__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                index: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: string;
                } | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_share_latest_api_share_actions__index__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                index: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: string;
                } | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_share_item_id_api_share_actions__id___index__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                index: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: string;
                } | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    subscribe_api_sse_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_cmd_host_api_system_host__param__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                param: "reboot" | "shutdown";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_cmd_service_api_system_service__param__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                param: "reload";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_cmd_systemctl_api_system_systemctl__param__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                param: "restart" | "stop" | "start" | "install" | "uninstall";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_for_access_token_api_admin_auth_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_login_for_access_token_api_admin_auth_token_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_users_me_api_admin_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_get_configurables_api_admin_config_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_reset_all_config_api_admin_config_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_get_config_current_active_api_admin_config__configurable__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                configurable: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_reset_config_api_admin_config__configurable__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                configurable: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_post_config_current_api_admin_config__configurable__patch: {
        parameters: {
            query?: {
                reload?: boolean;
            };
            header?: never;
            path: {
                configurable: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_get_config_schema_api_admin_config__configurable__schema_get: {
        parameters: {
            query?: {
                schema_type?: "default" | "dereferenced";
            };
            header?: never;
            path: {
                configurable: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_list_api_admin_files_list__dir__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dir: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_file_api_admin_files_file__file__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_upload_file_api_admin_files_file_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_upload_file_api_admin_files_file_upload_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_folder_new_api_admin_files_folder_new_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_delete_api_admin_files_delete_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PathListItem"][];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_zip_api_admin_files_zip_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PathListItem"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_clearrecycledir_api_admin_files_clearrecycledir_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_get_statscounter_reset_field_api_admin_information_cntr_reset__field__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                field: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_get_statscounter_reset_all_api_admin_information_cntr_reset__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_get_limitscounter_reset_field_api_admin_share_cntr_reset__field__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                field: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_get_limitscounter_reset_all_api_admin_share_cntr_reset__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_getitems_media__dimension___mediaitem_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mediaitem_id: string;
                dimension: components["schemas"]["DimensionTypes"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    index__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    ui_private_css_private_css_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_get_userfiles_userdata__filepath__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                filepath: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
